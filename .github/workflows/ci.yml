# ON1Builder CI/CD Workflow
#
# This workflow handles testing, building, and publishing of the ON1Builder package.
#
# Key features:
# - Runs linting and testing on Python 3.12 and 3.13
# - Builds package artifacts for PyPI
# - Publishes to Test PyPI on manual trigger
# - Publishes to PyPI when a tag is pushed or on manual trigger
# - Builds and deploys documentation
#
# Publishing to PyPI requires:
# - PYPI_API_TOKEN secret: PyPI API token with upload permissions
# - TEST_PYPI_API_TOKEN secret: Test PyPI API token for test deployments
#
# GitHub environment setup:
# - Create two environments: 'pypi' and 'testpypi'
# - Add environment protection rules as needed
# - Store the API tokens in the respective environment's secrets
#
# To trigger a release:
# 1. Tag a version: git tag v2.1.0 && git push origin v2.1.0
# 2. Or manually trigger the workflow from the Actions tab
#
name: ON1Builder CI/CD

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - production
      python_version:
        description: 'Python version for packaging'
        required: false
        default: '3.12'
        type: string

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            poetry.lock

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Lint with flake8
        run: |
          poetry run flake8 src tests

      - name: Check formatting with black
        run: |
          poetry run black --check src tests

      - name: Check imports with isort
        run: |
          poetry run isort --check-only src tests

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            poetry.lock

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Test with pytest
        run: |
          poetry run pytest -v tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build package
        run: |
          poetry build
          python setup.py sdist bdist_wheel

      - name: Check package
        run: |
          twine check dist/*

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  publish-test:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: success() && (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'test')
    environment:
      name: testpypi
      url: https://test.pypi.org/project/on1builder/

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

  publish-prod:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: success() && ((github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'production'))
    environment:
      name: pypi
      url: https://pypi.org/project/on1builder/

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

  docs:
    name: Build and Deploy Docs
    runs-on: ubuntu-latest
    needs: test
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx_rtd_theme mkdocs mkdocs-material

      - name: Build docs with Sphinx
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
